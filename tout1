.$0:
.globl main
main:
	pushq %rbp
	movq %rsp,%rbp
	subq $24,%rsp

.$1:
	movw $0,%ax
	movw %ax,-4(%rbp)

.$2:
	movw $100,%ax
	movw %ax,-6(%rbp)

.$3:
	movw $0,%ax
	movw %ax,-8(%rbp)

.$4:
	movw $0,%ax
	movw %ax,-2(%rbp)

.$5:
	movw -2(%rbp),%ax
	movw $100,%dx
	cmp %dx,%ax
	jl .$7

.$6:
	jmp .$13

.$7:
	movw -4(%rbp),%ax
	movw $1,%dx
	addw %dx,%ax
	movw %ax,-10(%rbp)

.$8:
	movw -10(%rbp),%ax
	movw %ax,-4(%rbp)

.$9:
	movw -2(%rbp),%ax
	movw %ax,-12(%rbp)

.$10:
	movw -2(%rbp),%ax
	movw $1,%dx
	addw %dx,%ax
	movw %ax,-14(%rbp)

.$11:
	movw -14(%rbp),%ax
	movw %ax,-2(%rbp)

.$12:
	jmp .$5

.$13:
	movw $99,%ax
	movw %ax,-2(%rbp)

.$14:
	movw -2(%rbp),%ax
	movw $0,%dx
	cmp %dx,%ax
	jl .$24

.$15:
	jmp .$16

.$16:
	movw -6(%rbp),%ax
	movw $1,%dx
	addw %dx,%ax
	movw %ax,-16(%rbp)

.$17:
	movw -16(%rbp),%ax
	movw %ax,-6(%rbp)

.$18:
	movw -2(%rbp),%ax
	movw $30,%dx
	cmp %dx,%ax
	je .$20

.$19:
	jmp .$21

.$20:
	jmp .$24

.$21:
	movw -2(%rbp),%ax
	movw $1,%dx
	subw %dx,%ax
	movw %ax,-18(%rbp)

.$22:
	movw -18(%rbp),%ax
	movw %ax,-2(%rbp)

.$23:
	jmp .$14

.$24:
	movw $0,%ax
	movw %ax,-2(%rbp)

.$25:
	movw -2(%rbp),%ax
	movw $100,%dx
	cmp %dx,%ax
	jl .$27

.$26:
	jmp .$38

.$27:
	movw -2(%rbp),%ax
	movw $30,%dx
	cmp %dx,%ax
	je .$29

.$28:
	jmp .$31

.$29:
	movw -2(%rbp),%ax
	movw $3,%dx
	cmp %dx,%ax
	je .$32

.$30:
	jmp .$31

.$31:
	jmp .$34

.$32:
	movw -8(%rbp),%ax
	movw $1,%dx
	addw %dx,%ax
	movw %ax,-20(%rbp)

.$33:
	movw -20(%rbp),%ax
	movw %ax,-8(%rbp)

.$34:
	movw -2(%rbp),%ax
	movw %ax,-22(%rbp)

.$35:
	movw -2(%rbp),%ax
	movw $1,%dx
	addw %dx,%ax
	movw %ax,-24(%rbp)

.$36:
	movw -24(%rbp),%ax
	movw %ax,-2(%rbp)

.$37:
	jmp .$25

.$38:
	movw -4(%rbp),%ax
	pushw %ax

.$39:
	subq $8,%rsp
	pushq 16(%rbp)
	call _writeInteger
	addq $18,%rsp

.$40:
	leaq .LC.1(%rip),%rax
	pushq %rax

.$41:
	subq $8,%rsp
	pushq 16(%rbp)
	call _writeString
	addq $24,%rsp

.$42:
	movw -6(%rbp),%ax
	pushw %ax

.$43:
	subq $8,%rsp
	pushq 16(%rbp)
	call _writeInteger
	addq $18,%rsp

.$44:
	leaq .LC.2(%rip),%rax
	pushq %rax

.$45:
	subq $8,%rsp
	pushq 16(%rbp)
	call _writeString
	addq $24,%rsp

.$46:
	movw -8(%rbp),%ax
	pushw %ax

.$47:
	subq $8,%rsp
	pushq 16(%rbp)
	call _writeInteger
	addq $18,%rsp

.$48:
	leaq .LC.3(%rip),%rax
	pushq %rax

.$49:
	subq $8,%rsp
	pushq 16(%rbp)
	call _writeString
	addq $24,%rsp

.$50:
.$main_0_11:
	movq %rbp,%rsp
	popq %rbp
	ret
.LC.1:
	.asciz	"\n"
.LC.2:
	.asciz	"\n"
.LC.3:
	.asciz	"\n"

