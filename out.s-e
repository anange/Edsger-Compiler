.$0:
_swap_2_12:
	pushq %rbp
	movq %rsp,%rbp
	subq $2,%rsp

.$1:
	movq 40(%rbp),%rsi
	movw (%rsi),%ax
	movw %ax,-2(%rbp)

.$2:
	movq 32(%rbp),%rsi
	movw (%rsi),%ax
	movq 40(%rbp),%rsi
	movw %ax,(%rsi)

.$3:
	movw -2(%rbp),%ax
	movq 32(%rbp),%rsi
	movw %ax,(%rsi)

.$4:
.$swap_2_12:
	movq %rbp,%rsp
	popq %rbp
	movq $0,%rax
	ret

.$5:
_bsort_2_11:
	pushq %rbp
	movq %rsp,%rbp
	subq $47,%rsp

.$6:
	movb $1,%al
	movb %al,-5(%rbp)

.$7:
	movb -5(%rbp),%al
	cmp $0,%al
	jne .$9

.$8:
	jmp .$31

.$9:
	movw $0,%ax
	movw %ax,-2(%rbp)

.$10:
	movb $0,%al
	movb %al,-5(%rbp)

.$11:
	movw 32(%rbp),%ax
	movw $1,%dx
	subw %dx,%ax
	movw %ax,-7(%rbp)

.$12:
	movw -2(%rbp),%ax
	movw -7(%rbp),%dx
	cmp %dx,%ax
	jl .$14

.$13:
	jmp .$30

.$14:
	movw -2(%rbp),%ax
	movq $0,%rcx
	movw $2,%cx
	imul %ax,%cx
	leaq 34(%rbp),%rax
	addq %rcx,%rax
	movq %rax,-15(%rbp)

.$15:
	movw -2(%rbp),%ax
	movw $1,%dx
	addw %dx,%ax
	movw %ax,-17(%rbp)

.$16:
	movw -17(%rbp),%ax
	movq $0,%rcx
	movw $2,%cx
	imul %ax,%cx
	leaq 34(%rbp),%rax
	addq %rcx,%rax
	movq %rax,-25(%rbp)

.$17:
	movq -15(%rbp),%rdi
	movq (%rdi),%rax
	movq -25(%rbp),%rdi
	movq (%rdi),%rdx
	cmp %dx,%ax
	jg .$19

.$18:
	jmp .$26

.$19:
	movw -2(%rbp),%ax
	movq $0,%rcx
	movw $2,%cx
	imul %ax,%cx
	leaq 34(%rbp),%rax
	addq %rcx,%rax
	movq %rax,-33(%rbp)

.$20:
	movq -33(%rbp),%rsi
	pushq %rsi

.$21:
	movw -2(%rbp),%ax
	movw $1,%dx
	addw %dx,%ax
	movw %ax,-35(%rbp)

.$22:
	movw -35(%rbp),%ax
	movq $0,%rcx
	movw $2,%cx
	imul %ax,%cx
	leaq 34(%rbp),%rax
	addq %rcx,%rax
	movq %rax,-43(%rbp)

.$23:
	movq -43(%rbp),%rsi
	pushq %rsi

.$24:
	subq $8,%rsp
	pushq %rbp
	call _swap_2_12
	addq $20,%rsp

.$25:
	movb $1,%al
	movb %al,-5(%rbp)

.$26:
	movw -2(%rbp),%ax
	movw %ax,-45(%rbp)

.$27:
	movw -2(%rbp),%ax
	movw $1,%dx
	addw %dx,%ax
	movw %ax,-47(%rbp)

.$28:
	movw -47(%rbp),%ax
	movw %ax,-2(%rbp)

.$29:
	jmp .$11

.$30:
	jmp .$7

.$31:
.$bsort_2_11:
	movq %rbp,%rsp
	popq %rbp
	movq $0,%rax
	ret

.$32:
_printArray_3_14:
	pushq %rbp
	movq %rsp,%rbp
	subq $14,%rsp

.$33:
	movq 42(%rbp),%rax
	pushq %rax

.$34:
	subq $8,%rsp
	movq 16(%rbp),%rsi
	pushq 16(%rsi)
	call _writeString
	addq $24,%rsp

.$35:
	movw $0,%ax
	movw %ax,-2(%rbp)

.$36:
	movw -2(%rbp),%ax
	movw 32(%rbp),%dx
	cmp %dx,%ax
	jl .$38

.$37:
	jmp .$49

.$38:
	movw -2(%rbp),%ax
	movw $0,%dx
	cmp %dx,%ax
	jg .$40

.$39:
	jmp .$42

.$40:
	leaq .LC.1(%rip),%rax
	pushq %rax

.$41:
	subq $8,%rsp
	movq 16(%rbp),%rsi
	pushq 16(%rsi)
	call _writeString
	addq $24,%rsp

.$42:
	movw -2(%rbp),%ax
	movq $0,%rcx
	movw $2,%cx
	imul %ax,%cx
	leaq 34(%rbp),%rax
	addq %rcx,%rax
	movq %rax,-10(%rbp)

.$43:
	movq -10(%rbp),%rdi
	movq (%rdi),%rax
	pushq %rax

.$44:
	subq $8,%rsp
	movq 16(%rbp),%rsi
	pushq 16(%rsi)
	call _writeInteger
	addq $18,%rsp

.$45:
	movw -2(%rbp),%ax
	movw %ax,-12(%rbp)

.$46:
	movw -2(%rbp),%ax
	movw $1,%dx
	addw %dx,%ax
	movw %ax,-14(%rbp)

.$47:
	movw -14(%rbp),%ax
	movw %ax,-2(%rbp)

.$48:
	jmp .$36

.$49:
	leaq .LC.2(%rip),%rax
	pushq %rax

.$50:
	subq $8,%rsp
	movq 16(%rbp),%rsi
	pushq 16(%rsi)
	call _writeString
	addq $24,%rsp

.$51:
.$printArray_3_14:
	movq %rbp,%rsp
	popq %rbp
	movq $0,%rax
	ret
.LC.1:
	.asciz	", "
.LC.2:
	.asciz	"\n"

.$52:
.globl main
main:
	pushq %rbp
	movq %rsp,%rbp
	subq $66,%rsp

.$53:
	movw $0,%ax
	movw %ax,-2(%rbp)

.$54:
	movw $65,%ax
	movw %ax,-36(%rbp)

.$55:
	movw -2(%rbp),%ax
	movw $12,%dx
	cmp %dx,%ax
	jl .$57

.$56:
	jmp .$94

.$57:
	leaq .LC.3(%rip),%rax
	pushq %rax

.$58:
	subq $8,%rsp
	pushq 16(%rbp)
	call _writeString
	addq $24,%rsp

.$59:
	movw -36(%rbp),%ax
	pushw %ax

.$60:
	subq $8,%rsp
	pushq 16(%rbp)
	call _writeInteger
	addq $18,%rsp

.$61:
	leaq .LC.4(%rip),%rax
	pushq %rax

.$62:
	subq $8,%rsp
	pushq 16(%rbp)
	call _writeString
	addq $24,%rsp

.$63:
	movw -2(%rbp),%ax
	pushw %ax

.$64:
	subq $8,%rsp
	pushq 16(%rbp)
	call _writeInteger
	addq $18,%rsp

.$65:
	leaq .LC.5(%rip),%rax
	pushq %rax

.$66:
	subq $8,%rsp
	pushq 16(%rbp)
	call _writeString
	addq $24,%rsp

.$67:
	movw -36(%rbp),%ax
	movw $137,%cx
	imul %cx,%ax
	movw %ax,-40(%rbp)

.$68:
	movw -40(%rbp),%ax
	movw $221,%dx
	addw %dx,%ax
	movw %ax,-42(%rbp)

.$69:
	movw -42(%rbp),%ax
	movw -2(%rbp),%dx
	addw %dx,%ax
	movw %ax,-44(%rbp)

.$70:
	movw -44(%rbp),%ax
	movw %ax,-38(%rbp)

.$71:
	movw -38(%rbp),%ax
	pushw %ax

.$72:
	subq $8,%rsp
	pushq 16(%rbp)
	call _writeInteger
	addq $18,%rsp

.$73:
	movw -38(%rbp),%ax
	movw $101,%cx
	cwtd
	idiv %cx
	movw %dx,-46(%rbp)

.$74:
	movw -46(%rbp),%ax
	movw %ax,-36(%rbp)

.$75:
	leaq .LC.6(%rip),%rax
	pushq %rax

.$76:
	subq $8,%rsp
	pushq 16(%rbp)
	call _writeString
	addq $24,%rsp

.$77:
	movw -36(%rbp),%ax
	pushw %ax

.$78:
	subq $8,%rsp
	pushq 16(%rbp)
	call _writeInteger
	addq $18,%rsp

.$79:
	movb $10,%al
	subq $1,%rsp
	movq %rsp,%rsi
	movb %al,(%rsi)

.$80:
	subq $8,%rsp
	pushq 16(%rbp)
	call _writeChar
	addq $17,%rsp

.$81:
	movw -2(%rbp),%ax
	movq $0,%rcx
	movw $2,%cx
	imul %ax,%cx
	leaq -34(%rbp),%rax
	addq %rcx,%rax
	movq %rax,-54(%rbp)

.$82:
	movw -36(%rbp),%ax
	movq -54(%rbp),%rdi
	movw %ax,(%rdi)

.$83:
	leaq .LC.7(%rip),%rax
	pushq %rax

.$84:
	subq $8,%rsp
	pushq 16(%rbp)
	call _writeString
	addq $24,%rsp

.$85:
	movw -2(%rbp),%ax
	movq $0,%rcx
	movw $2,%cx
	imul %ax,%cx
	leaq -34(%rbp),%rax
	addq %rcx,%rax
	movq %rax,-62(%rbp)

.$86:
	movq -62(%rbp),%rdi
	movq (%rdi),%rax
	pushq %rax

.$87:
	subq $8,%rsp
	pushq 16(%rbp)
	call _writeInteger
	addq $18,%rsp

.$88:
	movb $10,%al
	subq $1,%rsp
	movq %rsp,%rsi
	movb %al,(%rsi)

.$89:
	subq $8,%rsp
	pushq 16(%rbp)
	call _writeChar
	addq $17,%rsp

.$90:
	movw -2(%rbp),%ax
	movw %ax,-64(%rbp)

.$91:
	movw -2(%rbp),%ax
	movw $1,%dx
	addw %dx,%ax
	movw %ax,-66(%rbp)

.$92:
	movw -66(%rbp),%ax
	movw %ax,-2(%rbp)

.$93:
	jmp .$55

.$94:
	leaq .LC.8(%rip),%rax
	pushq %rax

.$95:
	leaq -34(%rbp),%rax
	pushq %rax

.$96:
	movw $12,%ax
	pushw %ax

.$97:
	subq $8,%rsp
	pushq %rbp
	call _printArray_3_14
	addq $34,%rsp

.$98:
	leaq .LC.9(%rip),%rax
	pushq %rax

.$99:
	leaq -34(%rbp),%rax
	pushq %rax

.$100:
	movw $12,%ax
	pushw %ax

.$101:
	subq $8,%rsp
	pushq %rbp
	call _printArray_3_14
	addq $34,%rsp

.$102:
	leaq .LC.10(%rip),%rax
	pushq %rax

.$103:
	leaq -34(%rbp),%rax
	pushq %rax

.$104:
	movw $12,%ax
	pushw %ax

.$105:
	subq $8,%rsp
	pushq %rbp
	call _printArray_3_14
	addq $34,%rsp

.$106:
	leaq .LC.11(%rip),%rax
	pushq %rax

.$107:
	leaq -34(%rbp),%rax
	pushq %rax

.$108:
	movw $12,%ax
	pushw %ax

.$109:
	subq $8,%rsp
	pushq %rbp
	call _printArray_3_14
	addq $34,%rsp

.$110:
	jmp .$main_0_13

.$111:
.$main_0_13:
	movq %rbp,%rsp
	popq %rbp
	movq $0,%rax
	ret
.LC.3:
	.asciz	"Orig seed = "
.LC.4:
	.asciz	", seed * 137 + 221 + "
.LC.5:
	.asciz	" = "
.LC.6:
	.asciz	", previous % 101 = "
.LC.7:
	.asciz	"x[i] = "
.LC.8:
	.asciz	"Initial array: "
.LC.9:
	.asciz	"Sorted array: "
.LC.10:
	.asciz	"Gamiesai?: "
.LC.11:
	.asciz	"E gamiesai: "

