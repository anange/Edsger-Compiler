.$0:
.globl main
main:
	pushq %rbp
	movq %rsp,%rbp
	subq $72,%rsp

.$1:
	movw $0,%ax
	movw %ax,-36(%rbp)

.$2:
	movw $0,%ax
	movw %ax,-2(%rbp)

.$3:
	movw -2(%rbp),%ax
	movw $14,%dx
	cmp %dx,%ax
	jl .$5

.$4:
	jmp .$11

.$5:
	movw -2(%rbp),%ax
	movq $0,%rcx
	movw $2,%cx
	imul %ax,%cx
	leaq -34(%rbp),%rax
	addq %rcx,%rax
	movq %rax,-44(%rbp)

.$6:
	movw -2(%rbp),%ax
	movq -44(%rbp),%rdi
	movq %rax,(%rdi)

.$7:
	movw -2(%rbp),%ax
	movw %ax,-46(%rbp)

.$8:
	movw -2(%rbp),%ax
	movw $1,%dx
	addw %dx,%ax
	movw %ax,-48(%rbp)

.$9:
	movw -48(%rbp),%ax
	movw %ax,-2(%rbp)

.$10:
	jmp .$3

.$11:
	movw $0,%ax
	movq $0,%rcx
	movw $2,%cx
	imul %ax,%cx
	leaq -34(%rbp),%rax
	addq %rcx,%rax
	movq %rax,-56(%rbp)

.$12:
	movq -56(%rbp),%rdi
	movq (%rdi),%rax
	pushq %rax

.$13:
	subq $8,%rsp
	pushq 16(%rbp)
	call _writeInteger
	addq $18,%rsp

.$14:
	movb $10,%al
	subq $1,%rsp
	movq %rsp,%rsi
	movb %al,(%rsi)

.$15:
	subq $8,%rsp
	pushq 16(%rbp)
	call _writeChar
	addq $17,%rsp

.$16:
	movw $5,%ax
	movq $0,%rcx
	movw $2,%cx
	imul %ax,%cx
	leaq -34(%rbp),%rax
	addq %rcx,%rax
	movq %rax,-64(%rbp)

.$17:
	movq -64(%rbp),%rdi
	movq (%rdi),%rax
	pushq %rax

.$18:
	subq $8,%rsp
	pushq 16(%rbp)
	call _writeInteger
	addq $18,%rsp

.$19:
	movb $10,%al
	subq $1,%rsp
	movq %rsp,%rsi
	movb %al,(%rsi)

.$20:
	subq $8,%rsp
	pushq 16(%rbp)
	call _writeChar
	addq $17,%rsp

.$21:
	movw $11,%ax
	movq $0,%rcx
	movw $2,%cx
	imul %ax,%cx
	leaq -34(%rbp),%rax
	addq %rcx,%rax
	movq %rax,-72(%rbp)

.$22:
	movq -72(%rbp),%rdi
	movq (%rdi),%rax
	pushq %rax

.$23:
	subq $8,%rsp
	pushq 16(%rbp)
	call _writeInteger
	addq $18,%rsp

.$24:
	movb $10,%al
	subq $1,%rsp
	movq %rsp,%rsi
	movb %al,(%rsi)

.$25:
	subq $8,%rsp
	pushq 16(%rbp)
	call _writeChar
	addq $17,%rsp

.$26:
	jmp .$main_0_11

.$27:
.$main_0_11:
	movq %rbp,%rsp
	popq %rbp
	movq $0,%rax
	ret

