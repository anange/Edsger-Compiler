type token =
  | T_int
  | T_double
  | T_bool
  | T_char
  | T_id
  | T_string
  | T_char_const
  | T_int_const
  | T_double_const
  | T_true
  | T_false
  | T_null
  | T_plu_assign
  | T_min_assign
  | T_mul_assign
  | T_div_assign
  | T_mod_assign
  | T_assign
  | T_incr
  | T_dcr
  | T_lteq
  | T_gteq
  | T_gt
  | T_lt
  | T_neq
  | T_eq
  | T_lbrace
  | T_rbrace
  | T_lbrack
  | T_rbrack
  | T_lparen
  | T_rparen
  | T_colon
  | T_semicolon
  | T_comma
  | T_qmark
  | T_and
  | T_or
  | T_negate
  | T_plus
  | T_minus
  | T_times
  | T_addr
  | T_break
  | T_byref
  | T_continue
  | T_new
  | T_delete
  | T_else
  | T_return
  | T_void
  | T_eof
  | T_for
  | T_do
  | T_begin
  | T_end
  | T_if
  | T_then
  | T_paren
  | T_mod
  | T_div

open Parsing;;
let _ = parse_error;;
let yytransl_const = [|
  257 (* T_int *);
  258 (* T_double *);
  259 (* T_bool *);
  260 (* T_char *);
  261 (* T_id *);
  262 (* T_string *);
  263 (* T_char_const *);
  264 (* T_int_const *);
  265 (* T_double_const *);
  266 (* T_true *);
  267 (* T_false *);
  268 (* T_null *);
  269 (* T_plu_assign *);
  270 (* T_min_assign *);
  271 (* T_mul_assign *);
  272 (* T_div_assign *);
  273 (* T_mod_assign *);
  274 (* T_assign *);
  275 (* T_incr *);
  276 (* T_dcr *);
  277 (* T_lteq *);
  278 (* T_gteq *);
  279 (* T_gt *);
  280 (* T_lt *);
  281 (* T_neq *);
  282 (* T_eq *);
  283 (* T_lbrace *);
  284 (* T_rbrace *);
  285 (* T_lbrack *);
  286 (* T_rbrack *);
  287 (* T_lparen *);
  288 (* T_rparen *);
  289 (* T_colon *);
  290 (* T_semicolon *);
  291 (* T_comma *);
  292 (* T_qmark *);
  293 (* T_and *);
  294 (* T_or *);
  295 (* T_negate *);
  296 (* T_plus *);
  297 (* T_minus *);
  298 (* T_times *);
  299 (* T_addr *);
  300 (* T_break *);
  301 (* T_byref *);
  302 (* T_continue *);
  303 (* T_new *);
  304 (* T_delete *);
  305 (* T_else *);
  306 (* T_return *);
  307 (* T_void *);
  308 (* T_eof *);
  309 (* T_for *);
  310 (* T_do *);
  311 (* T_begin *);
  312 (* T_end *);
  313 (* T_if *);
  314 (* T_then *);
  315 (* T_paren *);
  316 (* T_mod *);
  317 (* T_div *);
    0|]

let yytransl_block = [|
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\004\000\004\000\004\000\
\005\000\006\000\006\000\006\000\007\000\008\000\008\000\009\000\
\009\000\009\000\009\000\010\000\010\000\011\000\012\000\012\000\
\013\000\013\000\014\000\014\000\015\000\015\000\016\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\018\000\018\000\
\019\000\019\000\020\000\020\000\021\000\021\000\022\000\022\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\023\000\023\000\032\000\032\000\
\025\000\025\000\026\000\026\000\027\000\028\000\028\000\028\000\
\028\000\028\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\030\000\030\000\031\000\031\000\031\000\031\000\031\000\031\000\
\000\000"

let yylen = "\002\000\
\002\000\002\000\001\000\000\000\001\000\001\000\001\000\001\000\
\004\000\000\000\003\000\002\000\002\000\000\000\002\000\001\000\
\001\000\001\000\001\000\004\000\001\000\006\000\001\000\001\000\
\003\000\001\000\003\000\002\000\000\000\001\000\009\000\002\000\
\003\000\006\000\011\000\003\000\003\000\003\000\000\000\002\000\
\000\000\001\000\000\000\002\000\000\000\002\000\000\000\001\000\
\001\000\003\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\004\000\004\000\002\000\003\000\002\000\002\000\003\000\
\004\000\005\000\003\000\002\000\000\000\003\000\000\000\001\000\
\003\000\001\000\000\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\016\000\019\000\017\000\018\000\024\000\105\000\
\000\000\003\000\006\000\000\000\014\000\007\000\000\000\008\000\
\001\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\015\000\000\000\000\000\057\000\055\000\054\000\056\000\
\051\000\052\000\053\000\097\000\098\000\000\000\082\000\080\000\
\081\000\079\000\078\000\000\000\000\000\000\000\000\000\000\000\
\000\000\012\000\009\000\000\000\000\000\000\000\000\000\026\000\
\000\000\000\000\023\000\000\000\000\000\000\000\000\000\103\000\
\104\000\100\000\101\000\102\000\099\000\090\000\091\000\089\000\
\088\000\093\000\092\000\000\000\096\000\000\000\094\000\095\000\
\086\000\087\000\083\000\085\000\084\000\000\000\063\000\000\000\
\020\000\000\000\000\000\011\000\000\000\028\000\000\000\000\000\
\000\000\000\000\000\000\000\000\050\000\000\000\067\000\000\000\
\000\000\000\000\000\000\027\000\025\000\000\000\022\000\000\000\
\058\000\000\000\000\000\059\000\000\000\000\000\039\000\000\000\
\070\000\000\000\000\000\000\000\039\000\031\000\000\000\000\000\
\000\000\000\000\040\000\000\000\000\000\000\000\046\000\000\000\
\048\000\000\000\000\000\000\000\000\000\000\000\032\000\033\000\
\037\000\036\000\038\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\034\000\000\000\044\000\000\000\000\000\000\000\
\042\000\000\000\035\000"

let yydgoto = "\002\000\
\008\000\009\000\119\000\010\000\011\000\025\000\012\000\021\000\
\013\000\020\000\014\000\015\000\055\000\056\000\057\000\016\000\
\131\000\123\000\162\000\155\000\132\000\138\000\103\000\133\000\
\098\000\099\000\047\000\048\000\086\000\049\000\088\000\134\000"

let yysindex = "\004\000\
\029\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\005\255\000\000\000\000\011\255\000\000\000\000\016\255\000\000\
\000\000\000\000\008\255\031\255\022\255\047\255\092\002\011\255\
\017\255\000\000\041\255\050\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\217\000\000\000\000\000\
\000\000\000\000\000\000\029\255\092\002\024\002\046\255\092\002\
\092\002\000\000\000\000\011\255\045\255\083\255\052\255\000\000\
\058\255\092\002\000\000\032\255\062\001\066\255\024\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\092\002\000\000\092\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\092\002\000\000\092\002\
\000\000\230\254\024\002\000\000\091\255\000\000\041\255\240\254\
\024\002\062\255\073\255\092\002\000\000\092\002\000\000\095\001\
\125\001\024\002\024\002\000\000\000\000\029\255\000\000\092\002\
\000\000\024\002\158\001\000\000\092\002\029\255\000\000\054\002\
\000\000\024\002\054\000\252\254\000\000\000\000\104\255\104\255\
\092\002\086\255\000\000\060\255\024\002\087\255\000\000\107\000\
\000\000\107\255\108\255\111\255\092\002\094\255\000\000\000\000\
\000\000\000\000\000\000\188\001\092\002\160\000\119\255\116\255\
\092\002\160\000\000\000\135\255\000\000\092\002\140\255\160\000\
\000\000\142\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\038\255\143\255\114\255\000\000\000\000\000\000\
\000\000\000\000\148\255\000\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\153\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\149\255\000\000\
\000\000\157\255\000\000\000\000\000\000\032\001\069\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\220\001\074\255\000\000\000\000\000\000\000\000\000\000\
\164\255\168\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\082\255\090\255\000\000\000\000\151\255\000\000\000\000\
\000\000\134\255\000\000\000\000\000\000\204\255\000\000\039\255\
\000\000\154\255\226\254\250\001\000\000\000\000\169\255\169\255\
\171\255\000\000\000\000\000\000\027\255\000\000\000\000\226\254\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\171\255\226\254\000\000\001\000\
\171\255\226\254\000\000\000\000\000\000\170\255\000\000\239\254\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\096\000\000\000\248\255\000\000\000\000\231\255\000\000\
\000\000\244\255\000\000\232\255\000\000\112\000\000\000\000\000\
\156\255\092\000\000\000\000\000\000\000\090\000\000\000\233\255\
\000\000\000\000\000\000\000\000\000\000\234\255\000\000\165\255"

let yytablesize = 908
let yytable = "\046\000\
\018\000\054\000\076\000\071\000\001\000\003\000\004\000\005\000\
\006\000\078\000\110\000\050\000\059\000\060\000\061\000\019\000\
\041\000\111\000\059\000\062\000\022\000\063\000\045\000\087\000\
\090\000\091\000\058\000\093\000\135\000\003\000\004\000\005\000\
\006\000\084\000\097\000\045\000\023\000\140\000\087\000\092\000\
\087\000\003\000\004\000\005\000\006\000\003\000\004\000\005\000\
\006\000\152\000\051\000\052\000\104\000\157\000\105\000\007\000\
\017\000\151\000\072\000\161\000\072\000\156\000\106\000\026\000\
\107\000\024\000\159\000\087\000\087\000\054\000\073\000\021\000\
\021\000\073\000\087\000\089\000\114\000\027\000\115\000\007\000\
\058\000\087\000\087\000\087\000\087\000\053\000\095\000\094\000\
\120\000\096\000\100\000\087\000\087\000\122\000\102\000\108\000\
\112\000\087\000\068\000\087\000\068\000\068\000\068\000\062\000\
\113\000\062\000\062\000\062\000\137\000\018\000\087\000\061\000\
\142\000\061\000\061\000\061\000\141\000\148\000\013\000\064\000\
\143\000\064\000\064\000\064\000\149\000\087\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\145\000\146\000\013\000\013\000\
\147\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\153\000\013\000\013\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\065\000\154\000\065\000\065\000\065\000\
\158\000\004\000\004\000\160\000\013\000\013\000\013\000\163\000\
\010\000\004\000\004\000\029\000\030\000\004\000\077\000\066\000\
\004\000\066\000\066\000\066\000\075\000\004\000\004\000\004\000\
\004\000\004\000\004\000\074\000\004\000\004\000\004\000\076\000\
\004\000\071\000\047\000\004\000\071\000\118\000\109\000\004\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\136\000\139\000\000\000\000\000\000\000\000\000\005\000\005\000\
\000\000\000\000\000\000\000\000\000\000\000\000\005\000\005\000\
\000\000\000\000\005\000\000\000\000\000\005\000\000\000\000\000\
\000\000\000\000\005\000\005\000\005\000\005\000\005\000\005\000\
\000\000\005\000\005\000\005\000\000\000\005\000\000\000\000\000\
\005\000\000\000\000\000\000\000\005\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\000\000\000\000\000\000\
\000\000\000\000\000\000\043\000\043\000\000\000\000\000\000\000\
\000\000\000\000\000\000\043\000\043\000\000\000\000\000\043\000\
\000\000\000\000\043\000\000\000\000\000\000\000\000\000\043\000\
\043\000\043\000\043\000\043\000\043\000\000\000\043\000\043\000\
\043\000\000\000\043\000\000\000\000\000\043\000\000\000\000\000\
\000\000\043\000\124\000\029\000\030\000\031\000\032\000\033\000\
\034\000\035\000\000\000\000\000\000\000\000\000\000\000\000\000\
\036\000\037\000\000\000\000\000\000\000\000\000\000\000\000\000\
\125\000\126\000\000\000\000\000\038\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\039\000\040\000\041\000\042\000\
\043\000\127\000\000\000\128\000\044\000\045\000\000\000\129\000\
\000\000\000\000\000\000\000\000\000\000\000\000\130\000\124\000\
\029\000\030\000\031\000\032\000\033\000\034\000\035\000\000\000\
\000\000\000\000\000\000\000\000\000\000\036\000\037\000\000\000\
\000\000\000\000\000\000\000\000\000\000\125\000\144\000\000\000\
\000\000\038\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\039\000\040\000\041\000\042\000\043\000\127\000\000\000\
\128\000\044\000\045\000\000\000\129\000\000\000\000\000\000\000\
\000\000\000\000\000\000\130\000\124\000\029\000\030\000\031\000\
\032\000\033\000\034\000\035\000\000\000\000\000\000\000\000\000\
\000\000\000\000\036\000\037\000\000\000\000\000\000\000\000\000\
\000\000\000\000\125\000\000\000\000\000\000\000\038\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\039\000\040\000\
\041\000\042\000\043\000\127\000\000\000\128\000\044\000\045\000\
\000\000\129\000\000\000\000\000\000\000\000\000\000\000\000\000\
\130\000\003\000\004\000\005\000\006\000\028\000\029\000\030\000\
\031\000\032\000\033\000\034\000\035\000\000\000\000\000\000\000\
\000\000\000\000\000\000\036\000\037\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\038\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\039\000\
\040\000\041\000\042\000\043\000\000\000\000\000\000\000\044\000\
\045\000\000\000\000\000\007\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\000\000\000\000\049\000\049\000\000\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\000\000\049\000\
\049\000\049\000\000\000\000\000\069\000\069\000\069\000\069\000\
\069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
\069\000\069\000\000\000\049\000\049\000\069\000\000\000\069\000\
\069\000\069\000\069\000\069\000\069\000\069\000\000\000\069\000\
\069\000\069\000\064\000\065\000\066\000\067\000\068\000\069\000\
\036\000\037\000\070\000\071\000\072\000\073\000\074\000\075\000\
\000\000\000\000\076\000\069\000\069\000\101\000\000\000\000\000\
\077\000\078\000\079\000\080\000\000\000\081\000\082\000\083\000\
\000\000\000\000\000\000\064\000\065\000\066\000\067\000\068\000\
\069\000\036\000\037\000\070\000\071\000\072\000\073\000\074\000\
\075\000\084\000\085\000\076\000\116\000\000\000\000\000\000\000\
\000\000\077\000\078\000\079\000\080\000\000\000\081\000\082\000\
\083\000\064\000\065\000\066\000\067\000\068\000\069\000\036\000\
\037\000\070\000\071\000\072\000\073\000\074\000\075\000\000\000\
\000\000\076\000\084\000\085\000\000\000\117\000\000\000\077\000\
\078\000\079\000\080\000\000\000\081\000\082\000\083\000\000\000\
\000\000\000\000\064\000\065\000\066\000\067\000\068\000\069\000\
\036\000\037\000\070\000\071\000\072\000\073\000\074\000\075\000\
\084\000\085\000\076\000\121\000\000\000\000\000\000\000\000\000\
\077\000\078\000\079\000\080\000\000\000\081\000\082\000\083\000\
\064\000\065\000\066\000\067\000\068\000\069\000\036\000\037\000\
\070\000\071\000\072\000\073\000\074\000\075\000\000\000\000\000\
\076\000\084\000\085\000\150\000\000\000\000\000\077\000\078\000\
\079\000\080\000\000\000\081\000\082\000\083\000\000\000\000\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\000\000\084\000\
\085\000\060\000\000\000\060\000\060\000\060\000\060\000\000\000\
\060\000\060\000\000\000\060\000\060\000\060\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\000\000\000\000\049\000\000\000\
\060\000\000\000\000\000\049\000\049\000\049\000\049\000\049\000\
\000\000\049\000\049\000\049\000\064\000\065\000\066\000\067\000\
\068\000\069\000\036\000\037\000\070\000\071\000\072\000\073\000\
\074\000\075\000\000\000\000\000\076\000\049\000\049\000\000\000\
\000\000\000\000\077\000\078\000\079\000\080\000\000\000\081\000\
\082\000\083\000\064\000\065\000\066\000\067\000\068\000\069\000\
\036\000\037\000\070\000\071\000\072\000\073\000\074\000\075\000\
\000\000\000\000\076\000\084\000\085\000\000\000\000\000\000\000\
\000\000\078\000\079\000\080\000\000\000\081\000\082\000\083\000\
\028\000\029\000\030\000\031\000\032\000\033\000\034\000\035\000\
\000\000\000\000\000\000\000\000\000\000\000\000\036\000\037\000\
\000\000\084\000\085\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\038\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\039\000\040\000\041\000\042\000\043\000\000\000\
\000\000\000\000\044\000\045\000"

let yycheck = "\023\000\
\009\000\027\000\029\001\034\001\001\000\001\001\002\001\003\001\
\004\001\036\001\027\001\024\000\038\000\038\000\038\000\005\001\
\034\001\034\001\044\000\044\000\005\001\045\000\053\001\046\000\
\048\000\049\000\031\001\053\000\033\001\001\001\002\001\003\001\
\004\001\060\001\058\000\053\001\029\001\129\000\061\000\052\000\
\063\000\001\001\002\001\003\001\004\001\001\001\002\001\003\001\
\004\001\150\000\034\001\035\001\076\000\154\000\078\000\051\001\
\052\001\149\000\032\001\160\000\034\001\153\000\086\000\042\001\
\088\000\035\001\158\000\090\000\091\000\095\000\032\001\034\001\
\035\001\035\001\097\000\030\001\100\000\031\001\102\000\051\001\
\031\001\104\000\105\000\106\000\107\000\045\001\035\001\005\001\
\112\000\032\001\059\001\114\000\115\000\117\000\029\001\005\001\
\035\001\120\000\030\001\122\000\032\001\033\001\034\001\030\001\
\032\001\032\001\033\001\034\001\005\001\118\000\133\000\030\001\
\053\001\032\001\033\001\034\001\031\001\141\000\005\001\030\001\
\034\001\032\001\033\001\034\001\031\001\148\000\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\034\001\034\001\029\001\030\001\
\034\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\034\001\040\001\041\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\030\001\049\001\032\001\033\001\034\001\
\034\001\019\001\020\001\032\001\059\001\060\001\061\001\034\001\
\034\001\027\001\028\001\032\001\032\001\031\001\030\001\030\001\
\034\001\032\001\033\001\034\001\032\001\039\001\040\001\041\001\
\042\001\043\001\044\001\032\001\046\001\047\001\048\001\032\001\
\050\001\032\001\034\001\053\001\034\001\110\000\095\000\057\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\125\000\128\000\255\255\255\255\255\255\255\255\019\001\020\001\
\255\255\255\255\255\255\255\255\255\255\255\255\027\001\028\001\
\255\255\255\255\031\001\255\255\255\255\034\001\255\255\255\255\
\255\255\255\255\039\001\040\001\041\001\042\001\043\001\044\001\
\255\255\046\001\047\001\048\001\255\255\050\001\255\255\255\255\
\053\001\255\255\255\255\255\255\057\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\020\001\255\255\255\255\255\255\
\255\255\255\255\255\255\027\001\028\001\255\255\255\255\031\001\
\255\255\255\255\034\001\255\255\255\255\255\255\255\255\039\001\
\040\001\041\001\042\001\043\001\044\001\255\255\046\001\047\001\
\048\001\255\255\050\001\255\255\255\255\053\001\255\255\255\255\
\255\255\057\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\255\255\255\255\255\255\255\255\255\255\255\255\
\019\001\020\001\255\255\255\255\255\255\255\255\255\255\255\255\
\027\001\028\001\255\255\255\255\031\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\039\001\040\001\041\001\042\001\
\043\001\044\001\255\255\046\001\047\001\048\001\255\255\050\001\
\255\255\255\255\255\255\255\255\255\255\255\255\057\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\255\255\
\255\255\255\255\255\255\255\255\255\255\019\001\020\001\255\255\
\255\255\255\255\255\255\255\255\255\255\027\001\028\001\255\255\
\255\255\031\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\039\001\040\001\041\001\042\001\043\001\044\001\255\255\
\046\001\047\001\048\001\255\255\050\001\255\255\255\255\255\255\
\255\255\255\255\255\255\057\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\255\255\255\255\255\255\255\255\
\255\255\255\255\019\001\020\001\255\255\255\255\255\255\255\255\
\255\255\255\255\027\001\255\255\255\255\255\255\031\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\039\001\040\001\
\041\001\042\001\043\001\044\001\255\255\046\001\047\001\048\001\
\255\255\050\001\255\255\255\255\255\255\255\255\255\255\255\255\
\057\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\020\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\031\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\039\001\
\040\001\041\001\042\001\043\001\255\255\255\255\255\255\047\001\
\048\001\255\255\255\255\051\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\255\255\255\255\029\001\030\001\255\255\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\255\255\040\001\
\041\001\042\001\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\255\255\060\001\061\001\030\001\255\255\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\255\255\040\001\
\041\001\042\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\255\255\255\255\029\001\060\001\061\001\032\001\255\255\255\255\
\035\001\036\001\037\001\038\001\255\255\040\001\041\001\042\001\
\255\255\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\060\001\061\001\029\001\030\001\255\255\255\255\255\255\
\255\255\035\001\036\001\037\001\038\001\255\255\040\001\041\001\
\042\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\255\255\
\255\255\029\001\060\001\061\001\255\255\033\001\255\255\035\001\
\036\001\037\001\038\001\255\255\040\001\041\001\042\001\255\255\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\060\001\061\001\029\001\030\001\255\255\255\255\255\255\255\255\
\035\001\036\001\037\001\038\001\255\255\040\001\041\001\042\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\255\255\255\255\
\029\001\060\001\061\001\032\001\255\255\255\255\035\001\036\001\
\037\001\038\001\255\255\040\001\041\001\042\001\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\255\255\060\001\
\061\001\030\001\255\255\032\001\033\001\034\001\035\001\255\255\
\037\001\038\001\255\255\040\001\041\001\042\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\255\255\255\255\029\001\255\255\
\061\001\255\255\255\255\034\001\035\001\036\001\037\001\038\001\
\255\255\040\001\041\001\042\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\255\255\255\255\029\001\060\001\061\001\255\255\
\255\255\255\255\035\001\036\001\037\001\038\001\255\255\040\001\
\041\001\042\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\255\255\255\255\029\001\060\001\061\001\255\255\255\255\255\255\
\255\255\036\001\037\001\038\001\255\255\040\001\041\001\042\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\255\255\255\255\255\255\255\255\255\255\255\255\019\001\020\001\
\255\255\060\001\061\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\031\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\039\001\040\001\041\001\042\001\043\001\255\255\
\255\255\255\255\047\001\048\001"

let yynames_const = "\
  T_int\000\
  T_double\000\
  T_bool\000\
  T_char\000\
  T_id\000\
  T_string\000\
  T_char_const\000\
  T_int_const\000\
  T_double_const\000\
  T_true\000\
  T_false\000\
  T_null\000\
  T_plu_assign\000\
  T_min_assign\000\
  T_mul_assign\000\
  T_div_assign\000\
  T_mod_assign\000\
  T_assign\000\
  T_incr\000\
  T_dcr\000\
  T_lteq\000\
  T_gteq\000\
  T_gt\000\
  T_lt\000\
  T_neq\000\
  T_eq\000\
  T_lbrace\000\
  T_rbrace\000\
  T_lbrack\000\
  T_rbrack\000\
  T_lparen\000\
  T_rparen\000\
  T_colon\000\
  T_semicolon\000\
  T_comma\000\
  T_qmark\000\
  T_and\000\
  T_or\000\
  T_negate\000\
  T_plus\000\
  T_minus\000\
  T_times\000\
  T_addr\000\
  T_break\000\
  T_byref\000\
  T_continue\000\
  T_new\000\
  T_delete\000\
  T_else\000\
  T_return\000\
  T_void\000\
  T_eof\000\
  T_for\000\
  T_do\000\
  T_begin\000\
  T_end\000\
  T_if\000\
  T_then\000\
  T_paren\000\
  T_mod\000\
  T_div\000\
  "

let yynames_block = "\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    Obj.repr(
# 80 "Parser.mly"
                             ( printf "A Program Runs"; () )
# 554 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 84 "Parser.mly"
                                    ( () )
# 562 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 85 "Parser.mly"
                   ( () )
# 569 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "Parser.mly"
       (())
# 575 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 90 "Parser.mly"
                        (())
# 582 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 94 "Parser.mly"
                           ( () )
# 589 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 95 "Parser.mly"
                           ( () )
# 596 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 96 "Parser.mly"
                           ( () )
# 603 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : unit) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    Obj.repr(
# 100 "Parser.mly"
                                                       (())
# 612 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "Parser.mly"
      (())
# 618 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 105 "Parser.mly"
                                            (())
# 626 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 106 "Parser.mly"
                          (())
# 633 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 110 "Parser.mly"
                                   (())
# 641 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 114 "Parser.mly"
      (())
# 647 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    Obj.repr(
# 115 "Parser.mly"
                                    (())
# 654 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 118 "Parser.mly"
                  (())
# 660 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 119 "Parser.mly"
             (())
# 666 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 120 "Parser.mly"
             (())
# 672 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 121 "Parser.mly"
               (())
# 678 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    Obj.repr(
# 125 "Parser.mly"
                                                 (())
# 685 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 126 "Parser.mly"
           (())
# 691 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : unit) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    Obj.repr(
# 130 "Parser.mly"
                                                                    (())
# 699 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 134 "Parser.mly"
            (())
# 706 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 135 "Parser.mly"
             (())
# 712 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 139 "Parser.mly"
                                       (())
# 720 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 140 "Parser.mly"
                (())
# 727 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    Obj.repr(
# 144 "Parser.mly"
                        (())
# 734 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    Obj.repr(
# 145 "Parser.mly"
                 (())
# 741 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 149 "Parser.mly"
     (())
# 747 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 150 "Parser.mly"
                      (())
# 754 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : unit) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : unit) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    Obj.repr(
# 154 "Parser.mly"
                                                                                                              (())
# 764 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression_e) in
    Obj.repr(
# 158 "Parser.mly"
                              (())
# 771 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    Obj.repr(
# 159 "Parser.mly"
                                         (())
# 778 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : unit) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 160 "Parser.mly"
                                                              (())
# 787 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 10 : unit) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : 'expression_e) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'expression_e) in
    let _8 = (Parsing.peek_val __caml_parser_env 3 : 'expression_e) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    Obj.repr(
# 162 "Parser.mly"
                                                      (())
# 798 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    Obj.repr(
# 163 "Parser.mly"
                                  (())
# 805 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    Obj.repr(
# 164 "Parser.mly"
                               (())
# 812 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression_e) in
    Obj.repr(
# 165 "Parser.mly"
                                        (())
# 819 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 169 "Parser.mly"
     (())
# 825 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 170 "Parser.mly"
                                 (())
# 833 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 175 "Parser.mly"
     (())
# 839 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 176 "Parser.mly"
                (())
# 846 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 181 "Parser.mly"
      (())
# 852 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 182 "Parser.mly"
                       (())
# 859 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 186 "Parser.mly"
       (())
# 865 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 187 "Parser.mly"
                   (())
# 871 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 191 "Parser.mly"
       (())
# 877 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 192 "Parser.mly"
           (())
# 883 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 196 "Parser.mly"
           (())
# 889 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    Obj.repr(
# 197 "Parser.mly"
                                   (())
# 896 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 198 "Parser.mly"
             (())
# 902 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 199 "Parser.mly"
              (())
# 908 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 200 "Parser.mly"
             (())
# 914 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 201 "Parser.mly"
                  (())
# 920 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 202 "Parser.mly"
                   (())
# 926 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 203 "Parser.mly"
                     (())
# 932 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 204 "Parser.mly"
               (())
# 938 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    Obj.repr(
# 205 "Parser.mly"
                                               (())
# 945 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    Obj.repr(
# 206 "Parser.mly"
                                              (())
# 953 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 207 "Parser.mly"
                                             (())
# 961 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 208 "Parser.mly"
                                            (())
# 970 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 209 "Parser.mly"
                                  (())
# 978 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 210 "Parser.mly"
                                  (())
# 986 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 211 "Parser.mly"
                                              (())
# 995 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 212 "Parser.mly"
                                              (())
# 1003 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 213 "Parser.mly"
                                                       (())
# 1012 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 214 "Parser.mly"
                                           (())
# 1020 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 215 "Parser.mly"
                          (())
# 1027 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 219 "Parser.mly"
        (())
# 1033 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    Obj.repr(
# 220 "Parser.mly"
                                     (())
# 1040 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 224 "Parser.mly"
     (())
# 1046 "Parser.ml"
               : 'expression_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 225 "Parser.mly"
                  (())
# 1053 "Parser.ml"
               : 'expression_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 229 "Parser.mly"
                                         (())
# 1061 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 230 "Parser.mly"
                 (())
# 1068 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 234 "Parser.mly"
      (())
# 1074 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 235 "Parser.mly"
                      (())
# 1081 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 239 "Parser.mly"
               (())
# 1088 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 243 "Parser.mly"
             (())
# 1094 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 244 "Parser.mly"
              (())
# 1100 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 245 "Parser.mly"
             (())
# 1106 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 246 "Parser.mly"
              (())
# 1112 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 247 "Parser.mly"
               (())
# 1118 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 251 "Parser.mly"
              (())
# 1124 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 252 "Parser.mly"
            (())
# 1130 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 253 "Parser.mly"
            (())
# 1136 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 254 "Parser.mly"
             (())
# 1142 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 255 "Parser.mly"
              (())
# 1148 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 256 "Parser.mly"
           (())
# 1154 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 257 "Parser.mly"
           (())
# 1160 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 258 "Parser.mly"
             (())
# 1166 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 259 "Parser.mly"
             (())
# 1172 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 260 "Parser.mly"
           (())
# 1178 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 261 "Parser.mly"
            (())
# 1184 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 262 "Parser.mly"
            (())
# 1190 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 263 "Parser.mly"
           (())
# 1196 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 264 "Parser.mly"
              (())
# 1202 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 268 "Parser.mly"
             (())
# 1208 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 269 "Parser.mly"
            (())
# 1214 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 273 "Parser.mly"
               (())
# 1220 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 274 "Parser.mly"
                   (())
# 1226 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 275 "Parser.mly"
                   (())
# 1232 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 276 "Parser.mly"
                   (())
# 1238 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 277 "Parser.mly"
                   (())
# 1244 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 278 "Parser.mly"
                   (())
# 1250 "Parser.ml"
               : unit))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : unit)
